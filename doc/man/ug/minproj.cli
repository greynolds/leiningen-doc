
.ad l

.ll 72

.ce 1000
\fBProject Structure and Dynamics\fR
.ce 0

.sp 2
We create a minimal project and explore its structure and
configuration.
.sp 2
A minimal Leiningen project involves: a directory structure, a
project configuration file (project.clj), and source code files.
In addition to these static resources, Leiningen dynamically
determines a project map, a dependency tree, and several other
structures. This section takes you through some simple steps to
exlore these elements.
.sp 2
1. Create a new project by executing: \fRlein new app my-app\fR
   where \fRlein\fR is the Leiningen command, and the args are:
.sp 2
   \fBnew\fR
.br
            a Leiningen \fItask\fR. To see the syntax and
            semantics of this task, run \fRlein help new\fR. To
            see a list of the tasks that come preinstalled, run
            \fRlein help\fR.
.sp 2
   \fBapp\fR
.br
            is the name of a project template, in this case the
            default application template. To see a list of
            preinstalled templates, run \fRlein help new\fR.
            Leiningen's concept of \fItask\fR is discussed in
            detail under the X topic of this guide.
.sp 2
   \fBmy-app\fR
.br
            is the name to be used for the new project
.sp 2

.sp 2
   This will create a hierarchy of directories and populate it
   with some files generated from templates:
.sp 2
   
.br
   .
.br
   ./.gitignore
.br
   ./doc
.br
   ./doc/intro.md
.br
   ./project.clj
.br
   ./README.md
.br
   ./src
.br
   ./src/my_stuff
.br
   ./src/my_stuff/core.clj
.br
   ./test
.br
   ./test/my_stuff
.br
   ./test/my_stuff/core_test.clj
.br

.sp 2

.sp 2
2. Take a look at the Leiningen project file buy running \fRless
   my-app/project.clj\fR You should see something like:
.sp 2
   
.br
   (defproject my-app "0.1.0-SNAPSHOT"
.br
     :description "FIXME: write description"
.br
     :url "http://example.com/FIXME"
.br
     :license {:name "Eclipse Public License"
.br
               :url "http://www.eclipse.org/legal/epl-v10.html"}
.br
     :dependencies [[org.clojure/clojure "1.5.1"]])
.br
     
.sp 2

.sp 2
   \fBNote: \fR This has the form of a function application,
   where \fRdefproject\fR is the function, and the args come as a
   list of pairs. In fact, \fRdefproject\fR is a macro that
   expands into the definition of a Clojure map named
   \fRproject\fR. Each task - both those preinstalled and those
   defined by plugins - takes this \fRproject\fR map as input.
   The key point is that the key-value pairs of the \fRproject\fR
   map are thus available for use by task implementations to
   control setting of options etc. for the processes they manage.
.sp 2

.sp 2
   \fBNote: \fR The final \fRproject\fR map is determined by a
   combination of several sources in addition to project.clj,
   such as \fI~/.lein/profiles.clj\fR. See X for details.
.sp 2

.sp 2
   In this minimal example, the only really functional parameter
   is \fR:dependencies\fR. This is used to specify which
   libraries/jars the project uses (and thus depends on). One of
   the best things about Leiningen is its powerful management of
   dependencies. Using the [?] library under the hood, Leiningen
   is able to construct the entire dependency graph for the
   project and arrange for everything needed to be installed.
   Leiningen's dependency management capabilities are described
   in X.
.sp 2

.sp 2
   \fBImportant: \fR Leiningen dependency specification uses the
   naming conventions established by Maven:
   artifact-group/artifact-id. Etc. See X for details.
.sp 2

.sp 2
3. Examine the project map: \fRlein pprint\fR You should see
   something like:
.sp 2
   
.br
   {:compile-path "/Users/gar/tmp/my-app/target/classes",
.br
    :group "my-app",
.br
    :license
.br
    {:name "Eclipse Public License",
.br
     :url "http://www.eclipse.org/legal/epl-v10.html"},
.br
    :global-vars {},
.br
    :checkout-deps-shares
.br
    [:source-paths
.br
     :test-paths
.br
     :resource-paths
.br
     :compile-path
.br
     #&Var@3e25e2b8:
.br
       #amp;classpath$checkout_deps_paths leiningen.core.classpath$checkout_deps_paths@89bbe8c>>],
.br
    :dependencies
.br
    ([org.clojure/clojure "1.5.1"]
.br
     [org.clojure/tools.nrepl "0.2.3" :exclusions ([org.clojure/clojure])]
.br
     [clojure-complete/clojure-complete
.br
      "0.2.3"
.br
      :exclusions
.br
      ([org.clojure/clojure])]),
.br
    :plugin-repositories
.br
    [["central" {:snapshots false, :url "http://repo1.maven.org/maven2/"}]
.br
     ["clojars" {:url "https://clojars.org/repo/"}]],
.br
    :test-selectors {:default (constantly true)},
.br
    :target-path "/Users/gar/tmp/my-app/target",
.br
    :name "my-app",
.br
    :deploy-repositories
.br
    [["clojars"
.br
      {:username :gpg,
.br
       :url "https://clojars.org/repo/",
.br
       :password :gpg}]],
.br
    :root "/Users/gar/tmp/my-app",
.br
    :offline? false,
.br
    :source-paths ("/Users/gar/tmp/my-app/src"),
.br
    :certificates ["clojars.pem"],
.br
    :version "0.1.0-SNAPSHOT",
.br
    :jar-exclusions [#"^\."],
.br
    :profiles {:uberjar {:aot :all}},
.br
    :prep-tasks ["javac" "compile"],
.br
    :url "http://example.com/FIXME",
.br
    :repositories
.br
    [["central" {:snapshots false, :url "http://repo1.maven.org/maven2/"}]
.br
     ["clojars" {:url "https://clojars.org/repo/"}]],
.br
    :resource-paths
.br
    ("/Users/gar/tmp/my-app/dev-resources"
.br
     "/Users/gar/tmp/my-app/resources"),
.br
    :uberjar-exclusions [#"(?i)^META-INF/[^/]*\.(SF|RSA|DSA)$"],
.br
    :main my-app.core,
.br
    :jvm-opts ["-XX:+TieredCompilation" "-XX:TieredStopAtLevel=1"],
.br
    :eval-in :subprocess,
.br
    :plugins
.br
    ([lein-localrepo/lein-localrepo "0.4.1"]
.br
     [lein-difftest/lein-difftest "1.3.8"]
.br
     [org.clojure/java.classpath "0.2.0"]
.br
     [lein-marginalia/lein-marginalia "0.7.1"]
.br
     [lein-mustache/lein-mustache "0.2"]
.br
     [lein-pprint/lein-pprint "1.1.1"]),
.br
    :native-path "/Users/gar/tmp/my-app/target/native",
.br
    :description "FIXME: write description",
.br
    :test-paths ("/Users/gar/tmp/my-app/test"),
.br
    :clean-targets [:target-path],
.br
    :aliases nil}
.br
     
.sp 2

.sp 2
   Take some time to look this over. Most of these parameters you
   will never have to deal with, but it's good to have an idea of
   what sorts of things Leiningen is interested in.
.sp 2

.sp 2
   \fBNote: \fR The predefined paramters are documented in the
   Technical Reference Manual. Other chapters of this User's
   Guide explain how to use them.
.sp 2

.sp 2
   \fBNote: \fR We should distinguish between the project map
   that results from Leiningen's work and the defproject map in
   project.clj that forms the starting point for project map
   construction.
.sp 2

.sp 2
4. Tell Leiningen to install all dependencies by running \fRlein
   deps\fR Since you already have Clojure installed, you probably
   won't see any output.
.sp 2
5. Check your dependency tree: \fRlein deps :tree\fR You should
   see something like the following:
.sp 2
   
.br
    [clojure-complete "0.2.3" :exclusions [[org.clojure/clojure]]]
.br
    [org.clojure/clojure "1.5.1"]
.br
    [org.clojure/tools.nrepl "0.2.3" :exclusions [[org.clojure/clojure]]]
.br

.sp 2

.sp 2
   This is a complete listing of the jars your project depends
   on, derived from your project.clj :dependencies parameter plus
   a set of default maps to be described later. Since this is a
   tree representation, you can infer that these three libraries
   are independently specified; none of them has required any of
   the others as a dependency. In fact, \fRclojure-complete\fR
   and \fRorg.clojure/tools.nrepl\fR are both specified as
   dependencies by the default \fR:base\fR \fIprofile\fR, which
   means that they will always be in the dependency tree for
   every project (unless overriden). Profiles are named maps that
   can be used to customize the \fRproject\fR map in various
   ways; they are fully described in X.
.sp 2

.sp 2
6. Now let's take a look at the application code installed by the
   \fRapp\fR template. Use your editor, or run \fRcat
   src/my_app/core.clj\fR
.sp 2
   The contents of my-app/src/my_app/core.clj should look
   something like:
.sp 2
   
.br
   (ns my-app.core
.br
     (:gen-class))
.br
   
.br
   (defn -main
.br
     "I don't do a whole lot ... yet."
.br
     [& args]
.br
     (println "Hello, World!"))
.br

.sp 2
   \fBNote: \fR The \fR:gen-class\fR option and the definition of
   \fR-main\fR. Remember this was produced by the application
   template, rather than the library template. So it assumes you
   want to execute the result, which means you need to generate
   Java byte code. That's what :gen-class does. You also need a
   main entry point; thats what \fR-main\fR does.
.sp 2
   \fBNote: \fR In case it isn't obvious: to effectively use
   Leiningen, you need to know Clojure. That is, the better your
   mastery of Clojure, the more you can do with Leiningen.
   Leiningen is a Clojure application, after all.
.sp 2

.sp 2

.sp 2
Parent topic: Getting Started